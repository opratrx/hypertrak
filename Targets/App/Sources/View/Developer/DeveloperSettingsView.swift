//
//  DeveloperSettingsView.swift
//  App (Generated by SwiftyLaunch 1.5.0)
//  https://docs.swiftylaun.ch/module/app#developer-view
//
//  Use this developer settings view to adjust settings,
//  enable/disable features, etc. on the fly to help you with the development process.
//
//  This View is only shown in 'Debug / Development' Release Mode
//  DEBUG = Not App Store or TestFlight build
//

import AnalyticsKit
import InAppPurchaseKit
import NotifKit
import SharedKit
import SupabaseKit
import SwiftUI

struct DeveloperSettingsView: View {

	/// Will persist the setting on whether to always require biometric auth or just hide the view in the app switcher.
	///
	/// Used as a demo for .sensitiveView()
	@AppStorage("protectDeveloperViewWithBiometrics") private var protectDeveloperViewWithBiometrics: Bool = false

	@EnvironmentObject var db: DB

	@EnvironmentObject var iap: InAppPurchases

	@State var showOnboarding = false
	@State var showFeatureSheet = false

	@State var showRevenueCatDebug = false
	@State var showPaywall = false

	@State var showViewWithNoAccess = false
	@State var showViewWithAccessIfSignedIn = false

	var body: some View {
		NavigationStack {
			#if DEBUG
				List {
					Section {
						Button("Show Onboarding") {
							showOnboarding = true
						}

						Button("Show Feature Sheet") {
							showFeatureSheet = true
						}

						Button("Reset UserDefaults") {
							UserDefaults.standard.clear()
						}

						Button("Send InApp Notification") {
							showInAppNotification(
								.info,
								content: InAppNotificationContent(
									title: "Info Notification",
									message: "This is a normal Notification"),
								size: .normal
							) {
								print("hello")
							}
						}

						Button("Send Compact InApp Notification") {
							showInAppNotification(
								content: .init(
									title: "Custom Notification",
									message: "Compact Notification"),
								style: .init(
									sfSymbol: "star.fill", symbolColor: .indigo,
									size: .compact)
							)
						}

						Toggle(
							"Protect this View with Biometrics",
							isOn: $protectDeveloperViewWithBiometrics)
					}

					Section(header: Text("Ask User For...")) {

						// just examples on how to use `askUserFor` actions.
						Button("Will Ask for Review on 10th tap") {
							askUserFor(.appRating) {
								print(
									"Won't show rating sheet. Already prompted or not performing for the 10th time."
								)
							} onDismiss: {
								print("User Dimissing Rating Sheet.")
							}
						}

						Button("Ask for Photo Library Permission") {
							askUserFor(.photosAccess) {
								showInAppNotification(
									.success,
									content: .init(
										title: "Got Photos Access!", message: "Nice."))
							} onDismiss: {
								showInAppNotification(
									.warning,
									content: .init(
										title: "Dismissed :(",
										message: "User Declined Permission."))
							}
						}

						Button("Ask for Push Notifications Permission") {
							PushNotifications.showNotificationsPermissionsSheet()
						}

						Button("Ask for Camera Permission") {
							askUserFor(.cameraAccess)
						}

						Button("Ask for Microphone Permission") {
							askUserFor(.microphoneAccess)
						}

						Button("Ask for Location Access") {
							askUserFor(.locationAccess)
						}

						Button("Ask for Contacts Access") {
							askUserFor(.contactsAccess)
						}

						Button("Ask for Calendar Access") {
							askUserFor(.calendarAccess)
						}

						Button("Ask for Reminders Access") {
							askUserFor(.remindersAccess)
						}
					}

					Section(header: Text("InAppPurchaseKit")) {

						Button("This Button costs money to press") {
							iap.executeIfGotPremium {
								print("Premium Action")
							}
						}

						Button("This Button costs money to press (but less in-your-face)") {
							iap.executeIfGotPremium(otherwise: .showInAppNotification) {
								print("Premium Action")
							}
						}

						Button("Show RevenueCat Debug") {
							showRevenueCatDebug = true
						}

						Button("Show Paywall") {
							showPaywall = true
						}

						Button("Show Paywall (via notification center)") {
							InAppPurchases.showPaywallSheet()
						}

					}

					Section(header: Text("AuthKit & DBKit (Supabase)")) {

						Text("User ID")
							.badge("\(db.currentUser?.id.uuidString ?? "Not Logged In")")
							.textSelection(.enabled)  // allows the user to hold to copy

						Button("You probably can't see what this opens") {
							showViewWithNoAccess = true
						}

						Button("You can see what this opens (if you're signed in)") {
							showViewWithAccessIfSignedIn = true
						}
					}

					Section(header: Text("Analytics")) {
						Button("Send 'Test' event to Analytics") {
							Analytics.capture(.info, id: "test_event", source: .general)
						}
					}

				}
				.navigationTitle("Developer Settings")

				.debugRevenueCatOverlay(isPresented: $showRevenueCatDebug)

				.sheet(isPresented: $showPaywall) {
					InAppPurchaseView(onComplete: {
						print("User Purchased")
					})
				}
				.sheet(isPresented: $showFeatureSheet) {
					ShowFeatureSheetOnNewAppVersionModifier.WhatsNewView {
						showFeatureSheet = false
					}
				}
				.sheet(isPresented: $showOnboarding) {
					ShowOnboardingViewOnFirstLaunchEverModifier.OnboardingView {
						showOnboarding = false
					}
				}

				.sheet(isPresented: $showViewWithNoAccess) {
					Text("Super Secret View for a user with ID: '00000000-0000-0000-0000-000000000000'")
						.visibleOnlyToUserWithID(
							UUID(uuidString: "00000000-0000-0000-0000-000000000000"), db: db
						) {
							showViewWithNoAccess = false
						}
				}
				.sheet(isPresented: $showViewWithAccessIfSignedIn) {
					// if current id is nil, the id for this view will be set to zeroes, -> won't be visible no matter what your id is
					Text(
						"Super Secret View for a user with ID: \(String(describing: db.currentUser?.id ?? UUID(uuidString: "00000000-0000-0000-0000-000000000000")))"
					)
					.visibleOnlyToUserWithID(db.currentUser?.id, db: db) {
						showViewWithAccessIfSignedIn = false
					}
				}

			#endif
		}
		.sensitiveView(protectWithBiometrics: protectDeveloperViewWithBiometrics)
	}
}

#Preview {
	DeveloperSettingsView()
		.environmentObject(DB())
		.environmentObject(InAppPurchases())
}
